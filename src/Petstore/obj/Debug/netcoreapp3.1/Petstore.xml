<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Petstore</name>
    </assembly>
    <members>
        <member name="T:Petstore.Attributes.ValidateModelStateAttribute">
            <summary>
            Model state validation attribute
            </summary>
        </member>
        <member name="M:Petstore.Attributes.ValidateModelStateAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Called before the action method is invoked
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Petstore.Controllers.PetApiController">
            <summary>
            
            </summary>
        </member>
        <member name="M:Petstore.Controllers.PetApiController.AddPet(Petstore.Models.Pet)">
            <summary>
            Add a new pet to the store
            </summary>
            <param name="body">Pet object that needs to be added to the store</param>
            <response code="405">Invalid input</response>
        </member>
        <member name="M:Petstore.Controllers.PetApiController.DeletePet(System.Nullable{System.Int64},System.String)">
            <summary>
            Deletes a pet
            </summary>
            <param name="petId">Pet id to delete</param>
            <param name="apiKey"></param>
            <response code="400">Invalid ID supplied</response>
            <response code="404">Pet not found</response>
        </member>
        <member name="M:Petstore.Controllers.PetApiController.FindPetsByStatus(System.Collections.Generic.List{System.String})">
            <summary>
            Finds Pets by status
            </summary>
            <remarks>Multiple status values can be provided with comma separated strings</remarks>
            <param name="status">Status values that need to be considered for filter</param>
            <response code="200">successful operation</response>
            <response code="400">Invalid status value</response>
        </member>
        <member name="M:Petstore.Controllers.PetApiController.FindPetsByTags(System.Collections.Generic.List{System.String})">
            <summary>
            Finds Pets by tags
            </summary>
            <remarks>Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing.</remarks>
            <param name="tags">Tags to filter by</param>
            <response code="200">successful operation</response>
            <response code="400">Invalid tag value</response>
        </member>
        <member name="M:Petstore.Controllers.PetApiController.GetPetById(System.Nullable{System.Int64})">
            <summary>
            Find pet by ID
            </summary>
            <remarks>Returns a single pet</remarks>
            <param name="petId">ID of pet to return</param>
            <response code="200">successful operation</response>
            <response code="400">Invalid ID supplied</response>
            <response code="404">Pet not found</response>
        </member>
        <member name="M:Petstore.Controllers.PetApiController.UpdatePet(Petstore.Models.Pet)">
            <summary>
            Update an existing pet
            </summary>
            <param name="body">Pet object that needs to be added to the store</param>
            <response code="400">Invalid ID supplied</response>
            <response code="404">Pet not found</response>
            <response code="405">Validation exception</response>
        </member>
        <member name="M:Petstore.Controllers.PetApiController.UpdatePetWithForm(System.Nullable{System.Int64},System.String,System.String)">
            <summary>
            Updates a pet in the store with form data
            </summary>
            <param name="petId">ID of pet that needs to be updated</param>
            <param name="name">Updated name of the pet</param>
            <param name="status">Updated status of the pet</param>
            <response code="405">Invalid input</response>
        </member>
        <member name="M:Petstore.Controllers.PetApiController.UploadFile(System.Nullable{System.Int64},System.String,System.IO.Stream)">
            <summary>
            uploads an image
            </summary>
            <param name="petId">ID of pet to update</param>
            <param name="additionalMetadata">Additional data to pass to server</param>
            <param name="_file">file to upload</param>
            <response code="200">successful operation</response>
        </member>
        <member name="T:Petstore.Controllers.StoreApiController">
            <summary>
            
            </summary>
        </member>
        <member name="M:Petstore.Controllers.StoreApiController.DeleteOrder(System.Nullable{System.Int64})">
            <summary>
            Delete purchase order by ID
            </summary>
            <remarks>For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors</remarks>
            <param name="orderId">ID of the order that needs to be deleted</param>
            <response code="400">Invalid ID supplied</response>
            <response code="404">Order not found</response>
        </member>
        <member name="M:Petstore.Controllers.StoreApiController.GetInventory">
            <summary>
            Returns pet inventories by status
            </summary>
            <remarks>Returns a map of status codes to quantities</remarks>
            <response code="200">successful operation</response>
        </member>
        <member name="M:Petstore.Controllers.StoreApiController.GetOrderById(System.Nullable{System.Int64})">
            <summary>
            Find purchase order by ID
            </summary>
            <remarks>For valid response try integer IDs with value &gt;&#x3D; 1 and &lt;&#x3D; 10.         Other values will generated exceptions</remarks>
            <param name="orderId">ID of pet that needs to be fetched</param>
            <response code="200">successful operation</response>
            <response code="400">Invalid ID supplied</response>
            <response code="404">Order not found</response>
        </member>
        <member name="M:Petstore.Controllers.StoreApiController.PlaceOrder(Petstore.Models.Order)">
            <summary>
            Place an order for a pet
            </summary>
            <param name="body">order placed for purchasing the pet</param>
            <response code="200">successful operation</response>
            <response code="400">Invalid Order</response>
        </member>
        <member name="T:Petstore.Filters.BasePathFilter">
            <summary>
            BasePath Document Filter sets BasePath property of Swagger and removes it from the individual URL paths
            </summary>
        </member>
        <member name="M:Petstore.Filters.BasePathFilter.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="basePath">BasePath to remove from Operations</param>
        </member>
        <member name="P:Petstore.Filters.BasePathFilter.BasePath">
            <summary>
            Gets the BasePath of the Swagger Doc
            </summary>
            <returns>The BasePath of the Swagger Doc</returns>
        </member>
        <member name="M:Petstore.Filters.BasePathFilter.Apply(Microsoft.OpenApi.Models.OpenApiDocument,Swashbuckle.AspNetCore.SwaggerGen.DocumentFilterContext)">
            <summary>
            Apply the filter
            </summary>
            <param name="swaggerDoc">OpenApiDocument</param>
            <param name="context">FilterContext</param>
        </member>
        <member name="T:Petstore.Filters.GeneratePathParamsValidationFilter">
            <summary>
            Path Parameter Validation Rules Filter
            </summary>
        </member>
        <member name="M:Petstore.Filters.GeneratePathParamsValidationFilter.Apply(Microsoft.OpenApi.Models.OpenApiOperation,Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext)">
            <summary>
            Constructor
            </summary>
            <param name="operation">Operation</param>
            <param name="context">OperationFilterContext</param>
        </member>
        <member name="T:Petstore.Models.ApiResponse">
            <summary>
            
            </summary>
        </member>
        <member name="P:Petstore.Models.ApiResponse.Code">
            <summary>
            Gets or Sets Code
            </summary>
        </member>
        <member name="P:Petstore.Models.ApiResponse.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:Petstore.Models.ApiResponse.Message">
            <summary>
            Gets or Sets Message
            </summary>
        </member>
        <member name="M:Petstore.Models.ApiResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Petstore.Models.ApiResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Petstore.Models.ApiResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Petstore.Models.ApiResponse.Equals(Petstore.Models.ApiResponse)">
            <summary>
            Returns true if ApiResponse instances are equal
            </summary>
            <param name="other">Instance of ApiResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Petstore.Models.ApiResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Petstore.Models.Category">
            <summary>
            
            </summary>
        </member>
        <member name="P:Petstore.Models.Category.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:Petstore.Models.Category.Name">
            <summary>
            Gets or Sets Name
            </summary>
        </member>
        <member name="M:Petstore.Models.Category.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Petstore.Models.Category.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Petstore.Models.Category.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Petstore.Models.Category.Equals(Petstore.Models.Category)">
            <summary>
            Returns true if Category instances are equal
            </summary>
            <param name="other">Instance of Category to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Petstore.Models.Category.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Petstore.Models.Order">
            <summary>
            
            </summary>
        </member>
        <member name="P:Petstore.Models.Order.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:Petstore.Models.Order.PetId">
            <summary>
            Gets or Sets PetId
            </summary>
        </member>
        <member name="P:Petstore.Models.Order.Quantity">
            <summary>
            Gets or Sets Quantity
            </summary>
        </member>
        <member name="P:Petstore.Models.Order.ShipDate">
            <summary>
            Gets or Sets ShipDate
            </summary>
        </member>
        <member name="T:Petstore.Models.Order.StatusEnum">
            <summary>
            Order Status
            </summary>
            <value>Order Status</value>
        </member>
        <member name="F:Petstore.Models.Order.StatusEnum.PlacedEnum">
            <summary>
            Enum PlacedEnum for placed
            </summary>
        </member>
        <member name="F:Petstore.Models.Order.StatusEnum.ApprovedEnum">
            <summary>
            Enum ApprovedEnum for approved
            </summary>
        </member>
        <member name="F:Petstore.Models.Order.StatusEnum.DeliveredEnum">
            <summary>
            Enum DeliveredEnum for delivered
            </summary>
        </member>
        <member name="P:Petstore.Models.Order.Status">
            <summary>
            Order Status
            </summary>
            <value>Order Status</value>
        </member>
        <member name="P:Petstore.Models.Order.Complete">
            <summary>
            Gets or Sets Complete
            </summary>
        </member>
        <member name="M:Petstore.Models.Order.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Petstore.Models.Order.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Petstore.Models.Order.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Petstore.Models.Order.Equals(Petstore.Models.Order)">
            <summary>
            Returns true if Order instances are equal
            </summary>
            <param name="other">Instance of Order to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Petstore.Models.Order.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Petstore.Models.Pet">
            <summary>
            
            </summary>
        </member>
        <member name="P:Petstore.Models.Pet.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:Petstore.Models.Pet.Category">
            <summary>
            Gets or Sets Category
            </summary>
        </member>
        <member name="P:Petstore.Models.Pet.Name">
            <summary>
            Gets or Sets Name
            </summary>
        </member>
        <member name="P:Petstore.Models.Pet.PhotoUrls">
            <summary>
            Gets or Sets PhotoUrls
            </summary>
        </member>
        <member name="P:Petstore.Models.Pet.Tags">
            <summary>
            Gets or Sets Tags
            </summary>
        </member>
        <member name="T:Petstore.Models.Pet.StatusEnum">
            <summary>
            pet status in the store
            </summary>
            <value>pet status in the store</value>
        </member>
        <member name="F:Petstore.Models.Pet.StatusEnum.AvailableEnum">
            <summary>
            Enum AvailableEnum for available
            </summary>
        </member>
        <member name="F:Petstore.Models.Pet.StatusEnum.PendingEnum">
            <summary>
            Enum PendingEnum for pending
            </summary>
        </member>
        <member name="F:Petstore.Models.Pet.StatusEnum.SoldEnum">
            <summary>
            Enum SoldEnum for sold
            </summary>
        </member>
        <member name="P:Petstore.Models.Pet.Status">
            <summary>
            pet status in the store
            </summary>
            <value>pet status in the store</value>
        </member>
        <member name="M:Petstore.Models.Pet.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Petstore.Models.Pet.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Petstore.Models.Pet.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Petstore.Models.Pet.Equals(Petstore.Models.Pet)">
            <summary>
            Returns true if Pet instances are equal
            </summary>
            <param name="other">Instance of Pet to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Petstore.Models.Pet.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Petstore.Models.Tag">
            <summary>
            
            </summary>
        </member>
        <member name="P:Petstore.Models.Tag.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:Petstore.Models.Tag.Name">
            <summary>
            Gets or Sets Name
            </summary>
        </member>
        <member name="M:Petstore.Models.Tag.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Petstore.Models.Tag.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Petstore.Models.Tag.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Petstore.Models.Tag.Equals(Petstore.Models.Tag)">
            <summary>
            Returns true if Tag instances are equal
            </summary>
            <param name="other">Instance of Tag to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Petstore.Models.Tag.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Petstore.Models.User">
            <summary>
            
            </summary>
        </member>
        <member name="P:Petstore.Models.User.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:Petstore.Models.User.Username">
            <summary>
            Gets or Sets Username
            </summary>
        </member>
        <member name="P:Petstore.Models.User.FirstName">
            <summary>
            Gets or Sets FirstName
            </summary>
        </member>
        <member name="P:Petstore.Models.User.LastName">
            <summary>
            Gets or Sets LastName
            </summary>
        </member>
        <member name="P:Petstore.Models.User.Email">
            <summary>
            Gets or Sets Email
            </summary>
        </member>
        <member name="P:Petstore.Models.User.Password">
            <summary>
            Gets or Sets Password
            </summary>
        </member>
        <member name="P:Petstore.Models.User.Phone">
            <summary>
            Gets or Sets Phone
            </summary>
        </member>
        <member name="P:Petstore.Models.User.UserStatus">
            <summary>
            User Status
            </summary>
            <value>User Status</value>
        </member>
        <member name="M:Petstore.Models.User.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Petstore.Models.User.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Petstore.Models.User.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Petstore.Models.User.Equals(Petstore.Models.User)">
            <summary>
            Returns true if User instances are equal
            </summary>
            <param name="other">Instance of User to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Petstore.Models.User.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
    </members>
</doc>
